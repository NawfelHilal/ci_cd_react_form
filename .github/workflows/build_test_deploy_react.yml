name: Build, Test and Deploy React Application

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      contents: write

    strategy:
      matrix:
        node-version: [20.x]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: react-form/package-lock.json

      - name: Install dependencies
        run: |
          cd react-form
          npm install
          npm ci

      - name: Build and test
        run: |
          cd react-form
          npm run build
          npm test -- --watchAll=false

      - name: Build the stack
        run: docker compose up -d
      - name: Run e2e tests with cypress
        uses: cypress-io/github-action@v6
        with:
          working-directory: react-form
          wait-on: |
            http://localhost:3000
            http://localhost:8000
          install: false
      - name: Stop the stack
        run: docker-compose -f docker-compose-v3.yml down

      - name: Generate JSDoc
        run: |
          cd react-form
          npm run jsdoc
          # S'assurer que la documentation est copiÃ©e dans le dossier build
          cp -r public/docs build/docs

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          directory: react-form/coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: build and publish package on NPM ðŸ“¦
        run: |
          cd react-form
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          git config --global user.email "nawfelhilal13@gmail.com"
          git config --global user.name "Nawfel Hilal"

          # RÃ©cupÃ©rer la version actuelle depuis package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Version from package.json: $CURRENT_VERSION"

          # VÃ©rifier si la version existe dÃ©jÃ  sur npm
          if npm view ynov-ci-cd-nawfel@$CURRENT_VERSION version &>/dev/null; then
            echo "Version $CURRENT_VERSION already exists on npm, skipping publish"
            SHOULD_PUBLISH=false
          else
            echo "Version $CURRENT_VERSION does not exist on npm yet, will publish"
            SHOULD_PUBLISH=true
          fi

          # Construire le package
          npm run build-npm-ci

          # Publier seulement si la version n'existe pas encore
          if [ "$SHOULD_PUBLISH" = "true" ]; then
            echo "Publishing version $CURRENT_VERSION"
            npm publish --access public
          else
            echo "Skipping publish as version $CURRENT_VERSION already exists on npm"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: react-form/build
          if-no-files-found: error

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    permissions:
      pages: write
      id-token: write

    needs: build_test

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy_vercel:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy to prod
        run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}
